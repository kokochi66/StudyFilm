<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans.xsd">

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- JDBC, Mybatis와 같이 JDBC를 이용해서 데이터베이스 연동 처리를 하는 경우,
	DataSourceTransactionManager를 트랜잭션 관리자로 사용한다.
	위에서, dataSource프로퍼티를 통해서 전달받은 소스로부터 Connection을 가져오고, 메소드를 사용해서 트랜잭션을 관리한다.
	JPA를 사용할경우, JpaTransactionManager를 트랜잭션 관리자로 설정함년 된다.
	이 경우ㅡ, 전달받은 entityManagerFactory를 이용해서 트랜잭션을 관리한다(13장)
	하이버네이트를 사용하는경우, HibernateTransactionManger를 트랜잭션 관리자로 사용한다.(13장) -->

	
	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	<!-- TransactionTemplate을 이용한 트랜잭션 구현 -->

	<bean id="placeOrderService"
		class="net.madvirus.spring4.chap12.store.service.PlaceOrderServiceTxTemplateImpl">
		<property name="itemDao" ref="itemDao" />
		<property name="paymentInfoDao" ref="paymentInfoDao" />
		<property name="purchaseOrderDao" ref="purchaseOrderDao" />
		<property name="transactionTemplate" ref="transactionTemplate" />
	</bean>

	<bean id="itemDao" class="net.madvirus.spring4.chap12.store.dao.jdbc.JdbcItemDao">
		<constructor-arg>
			<ref bean="dataSource" />
		</constructor-arg>
	</bean>

	<bean id="paymentInfoDao"
		class="net.madvirus.spring4.chap12.store.dao.jdbc.JdbcPaymentInfoDao">
		<constructor-arg>
			<ref bean="dataSource" />
		</constructor-arg>
	</bean>

	<bean id="purchaseOrderDao"
		class="net.madvirus.spring4.chap12.store.dao.jdbc.JdbcPurchaseOrderDao">
		<constructor-arg>
			<ref bean="dataSource" />
		</constructor-arg>
	</bean>

</beans>