<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">
	<!-- 스프링 시큐리티를 위한 네임 스페이스를 설정한다. sec:http 태그가 스프링 시큐리티 설정의 핵심이다.
	이 태그에서 스프링 시큐리티의 거의 모든 설정을 처리한다.
	use-expressions설정으로 표현식을 사용하도록 한다. -->
	<sec:http use-expressions="true">
		<!-- intercept-url의 pattern 속성은 접근 경로를 Ant패턴으로 설정하며, 
		access속성은 해당 경로 패턴에 누가 접근 가능한지를 설정한다.
		hasAutority()와 hasRole()은 같은 의미를 가진다. 
		intercept-url의 우선순위는 작성 순서대로 적용된다. 
		스프링 시큐리티에서 지원하는 접근제어 표현식 681p -->
		<sec:intercept-url pattern="/admin/**" 
		                   access="hasAuthority('ROLE_ADMIN')" />
		<sec:intercept-url pattern="/manager/**" 
		                   access="hasRole('ROLE_MANAGER')" />
		<sec:intercept-url pattern="/member/**" access="isAuthenticated()" />
		<!-- permitAll은 누구나 접근 가능하다는 것을 뜻한다. -->
		<sec:intercept-url pattern="/**" access="permitAll"/>
		<!-- form-login 태그는 인증된 사용자만 허용되는 자원에 접근할 때, 로그인 폼을 접근하게 해주며,
		로그인 폼에서 아이디/암호를 전송한다면 로그인 처리를 해준다. -->
		<sec:form-login />
		<!-- logout태그는 로그아웃 처리를 위한 기능을 추가해준다. -->
		<sec:logout />
	</sec:http>

	<!-- 코드가 너무 길어지기 때문에, 스프링 시큐리티가 제공하는 인메모리 사용지 DB기능을 이용해서 사용자 정보를 설정한다. -->
	<sec:authentication-manager>
		<sec:authentication-provider>
			<sec:user-service>
				<sec:user name="bkchoi" password="1234" 
				          authorities="ROLE_USER" />
				<sec:user name="manager" password="qwer" 
				          authorities="ROLE_MANAGER" />
				<sec:user name="admin" password="asdf" 
				          authorities="ROLE_ADMIN,ROLE_USER" />
			</sec:user-service>
		</sec:authentication-provider>
	</sec:authentication-manager>
</beans>