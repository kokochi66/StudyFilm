Chapter 03 빈 라이프사이클과 빈 범위

01 :: 빈 객체의 라이프사이클

스프링 컨테이너의 라이프사이클 관리방법
1) 스프링이 제공하는 특정 인터페이스를 상속받아 빈을 구현
2) 스프링 설정에서 특정 메소드를 호출하라고 지정

- 빈 라이프사이클
빈 객체 생성 > 빈 프로퍼티 설정 > setBeanName() > setApplicationContext() > BeanPostProcessor의 초기화 전 전처리
> @PostConstruct > afterPropertiesSet() > 커스텀 init 메소드 > 초기화 후 처리
> 빈 객체  사용 > @PreDestroy > destroy() > 커스텀 destroy 메소드

- 빈 객체의 초기화와 소멸 방법
1) InitailizingBean 인터페이스와 DisposableBean 인터페이스를 활용하기 (chap03.ConnPool1)
2) 어노테이션 @PostConstruct와 @PreDestroy를 활용하기 (chap03.CoonPool2)
3) 커스텀 init메소드와 커스텀 destroy 메소드를 활용하기 (chap03.CoonPool3, chap03.ConfigForLifecycle)

- 객체에서 스프링 컨테이너에 접근하기 : ApplicationContextAware 인터페이스를 활용 (chap03.WorkScheduler)
- 객체에서 빈의 이름을 저장하기 : BeanNameAware 인터페이스를 활용 (chap003.WorkRunner)

02 :: 빈 객체의 범위(scope)
빈의 범위에는 싱글톤범위(Singleton)와 프로토타입범위(Prototype)가 존재한다.
스프링은 싱글톤을 기본 값으로 갖기 때문에 별도의 설정을 하지 않으면 빈은 싱글톤 범위를 갖는다.

싱글톤은 빈 설정을 통해서 생성한 객체는 단 한개만 존재하게 되므로, 이것을 싱글톤 범위라고 부른다.
프로토타입은 동일한 객체를 일부만 변경하여 여러개를 생성할 수 있도록 한다. 다만 모두 별도의 객체가 생성되므로, 종료를 별도르 해주어야한다.

(resources/config-for-scope.xml , chap03.ConfigForScope.java)




