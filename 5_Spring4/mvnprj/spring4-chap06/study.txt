Chapter06 :: 스프링 AOP(Aspect Oriented Programming)
Advice : 언제 공통관심기능을 핵심 로직에 적용할지
JoinPoint : Advice를 적용가능한 지점
Pointcut : 실제로 Advice가 적용되는 JoinPoint
Weaving : Advice를 핵심 로직코드에 적용하는 행위
Aspect : 공통으로 적용되는 기능

Weaving의 방식
- 컴파일 시 : AspectJ에서 적용, 알맞은 위치에 공통코드를 삽입하면, AOP가 적용된 클래스 파일이 생성되는 방식 
- 클래스 로딩 시 : 클래스 로딩시, 클래스 정보를 변경할 수 있는 에이전트 제공, 원본 클래스 파일은 변경되지 않음
- 런타임 시 : 소스코드나 클래스 정보 자체를 변경하지 않으며, 프록시를 이용하여 AOP를 구현한다.

스프링은 자체적으로 프록시 기반의 AOP를 지원하며, 메서드호출 JoinPoint만을 지원한다. (다른방식을 원하면 AspectJ와 같은 도구를 사용해야한다)
스프링의 AOP구현방식
-XML 스키마기반 POJO클래스이용, AspectJ에서 적용한 @Aspect 어노테이션 기반, 스프링 API기반

XML기반 AOP 퀵 스타트 (pom.xml , acQuickStart.xml, acQuickStart2.xml)
Around Advice 클래스 작성 예시(aop.Profiler.java)
적용한 값 실행 (MainQuickStart.java)
이를 통해서 핵심 기능에는 변화를 주지 않으면서 모든 기능에 공통된 기능을 추가할 수 있다.

