Chapter06 :: 스프링 AOP(Aspect Oriented Programming)
Advice : 언제 공통관심기능을 핵심 로직에 적용할지
JoinPoint : Advice를 적용가능한 지점
Pointcut : 실제로 Advice가 적용되는 JoinPoint
Weaving : Advice를 핵심 로직코드에 적용하는 행위
Aspect : 공통으로 적용되는 기능

Weaving의 방식
- 컴파일 시 : AspectJ에서 적용, 알맞은 위치에 공통코드를 삽입하면, AOP가 적용된 클래스 파일이 생성되는 방식 
- 클래스 로딩 시 : 클래스 로딩시, 클래스 정보를 변경할 수 있는 에이전트 제공, 원본 클래스 파일은 변경되지 않음
- 런타임 시 : 소스코드나 클래스 정보 자체를 변경하지 않으며, 프록시를 이용하여 AOP를 구현한다.

스프링은 자체적으로 프록시 기반의 AOP를 지원하며, 메서드호출 JoinPoint만을 지원한다. (다른방식을 원하면 AspectJ와 같은 도구를 사용해야한다)
스프링의 AOP구현방식
-XML 스키마기반 POJO클래스이용, AspectJ에서 적용한 @Aspect 어노테이션 기반, 스프링 API기반

XML기반 AOP 퀵 스타트 (pom.xml , acQuickStart.xml)
Around Advice 클래스 작성 예시(aop.Profiler.java)
적용한 값 실행 (MainQuickStart.java)
이를 통해서 핵심 기능에는 변화를 주지 않으면서 모든 기능에 공통된 기능을 추가할 수 있다.

@Aspect 어노테이션 기반 AOP 퀵 스타트 ( aop.ProfilingAspect.java , acQuickStart2.xml , MainQuickStart2 )
XML기반과 사용이 크게 다르지않으며, 각 어드바이스값을 어노테이션을 통해서 구현하면 된다.

@EnableAspectJAutoProxy를 이용한 @Aspect 적용 ( config.QuickStartConfig.java , MainJavaConfigQuickStart )

AroundAdvice를 제외한 나머지 Advice 타입을 구현한 메소드는 JoinPoint 객체를 선택적으로 사용할 수 있다.
그러나 사용할때 반드시 첫번째 파라미터로 사용해주어야한다.

Advice메서드에서 직접 파라미터를 이용해서 메서드 호출 시 사용된 인자에 접근하기 
(aop.UpdateMemberInfoTraceAdvice.java  MainAopType.java AopConfig.java, NoAopConfig.java)

하나의 JoinPoint에 한개 이상의 Advice가 적용되면 순서를 명시적으로 지정해주어야한다. 이럴 때 @Order 어노테이션 적용하거나,
Ordered인터페이스를 구현할 수 있다. XML 스키마를 사용할 경우, <aop:aspect>태그에 order 속성을 사용해서 지정할 수 있다.
Order값은 낮은 Advice의 우선순위가 더 높다.
