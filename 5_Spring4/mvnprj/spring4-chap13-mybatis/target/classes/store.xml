<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans   
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">
	
	<!-- 
		MyBatis를 스프링과 연동하는 방법은 다음과 같다. (pom.xml의 의존속성을 추가해준다.)
		1. 의조속성에서 MyBatis-Spring 모듈을 추가한다.
		SqlSessiuonFactoryBean을 이용해서 SQLSessionFactory를 설정한다.
		트랜잭션을 설정한다.
		MyBatis를 이용한 DAO를 구현한다.
	 -->
	
	<tx:annotation-driven />

	<bean
		class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="com.mysql.jdbc.Driver" />
		<property name="jdbcUrl"
			value="jdbc:mysql://localhost/shop?characterEncoding=utf8" />
		<property name="user" value="spring4" />
		<property name="password" value="spring4" />
	</bean>

	<!-- mybatis-spring 모듈이 제공하는 SqlSessionFactoryBean을 이용해서 SqlSessioNFactory를 생성한다. -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- DB를 구할 때 사용할 DataSource를 설정한다. -->
		<property name="dataSource" ref="dataSource" />
		<!-- 매핑 쿼리를 담고있는 파일의 목록을 지정한다. 각 파일 참조 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:/mybatis/itemdao.xml</value>
				<value>classpath:/mybatis/purchaseorderdao.xml</value>
			</list>
		</property>
		<property name="typeAliasesPackage" value="net.madvirus.spring4.chap13.store.model" />
		<!-- typeAliases 프로퍼티에는 별칭을 사용할 클래스 목록을 지정할 때 사용한다. -->
<!-- 		<property name="typeAliases"> -->
<!-- 			<list> -->
<!-- 				<value>net.madvirus.spring4.chap13.store.model.PurchaseOrder</value> -->
<!-- 			</list> -->
<!-- 		</property> -->
<!--  -->
	</bean>

	<!-- sqlSession 기능과 스프링의 DB 지원 기능을 연동해주는 SqlSessionTemplate클래스를 지원한다.  -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactory" />
	</bean>

	<bean id="itemDao"
		class="net.madvirus.spring4.chap13.store.dao.MyBatisItemDao">
		<property name="sqlSession" ref="sqlSessionTemplate" />
	</bean>

	<bean id="itemDao2"
		class="net.madvirus.spring4.chap13.store.dao.MyBatisItemDao2">
		<property name="sqlSessionTemplate" ref="sqlSessionTemplate" />
	</bean>

	<!-- myBatis를 이요한 DAO 구현에는 대부분 코드는 단순히 SqlSession의 메소들르 호출하는것으로 끝난다.
	이런 단순 코드작업을 줄이기 위해서, 런타임에 매퍼 객체를 생성하는기능을 제공하고 있다.
	개별매퍼 인터페이스로부터 DAO 빈 객체를 생성하려면 MapperFactoryBean클래스를 사용하면 된다.  -->
	<bean id="purchaseOrderDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<!-- mapperInterface 프로퍼티로, 매퍼로 사용할 인터페이스를 지정한다.
		자동으로 생성되는 빈 객체는 인터페이스의 패키지 이름을 포함한 완전한 이름과 메서드 이름을 이용해서 XML파일에서 사용할 쿼리를 찾는다. -->
		<property name="mapperInterface"
			value="net.madvirus.spring4.chap13.store.dao.PurchaseOrderDao" />
		<!-- sqlSessionFactory 프로퍼티는 sqlSessionFactory빈으로 설정한다. -->
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<bean id="paymentInfoDao" class="org.mybatis.spring.mapper.MapperFactoryBean">
		<property name="mapperInterface"
			value="net.madvirus.spring4.chap13.store.dao.PaymentInfoDao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<bean id="placeOrderService"
		class="net.madvirus.spring4.chap13.store.service.PlaceOrderServiceImpl">
		<property name="itemDao" ref="itemDao2" />
		<property name="purchaseOrderDao" ref="purchaseOrderDao" />
		<property name="paymentInfoDao" ref="paymentInfoDao" />
	</bean>
</beans>

