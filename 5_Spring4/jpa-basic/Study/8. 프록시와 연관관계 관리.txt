프록시와 연관관계 관리

목차
- 프록시
- 즉시로딩과 지연로딩
- 지연로딩 활용
- 영속성 전이 : CASCADE
- 고아 객체
- 영속성 전이 + 고아 객체, 생명주기

1) 프록시 :
em.find() : 데이터베이스를 통해 실제 엔티티 객체 조회
em.getReference() : 데이터베이스 조회를 이후로 미루는 가짜(프록시) 객체를 조회한다.
- 실제 클래스를 상속받아서 만들어져, 겉 모양이 일치한다.
- 사용하는 입장에서는 진짜 객체인지 프록시 객체인지 구분하지 않고 사용할 수 있다. ( 이론상 )
- 프록시 객체는 실제 객체의 참조값인 target을 보관한다.

*프록시의 특징
- 처음 사용할 때 한번만 초기화한다.
- 초기화 시에 프록시객체가 실제 엔티티에 접근하도록 하는 것이지, 실제 객체로 변환되는 것이 아니다.
- 여전히 프록시객체로 유지되기 때문에 타입 체크에서 주의해야한다 ( == 비교를 하면 안됨, instance of 를 사용해야함 )
- 영속성 컨텍스트에 찾고자하는 객체가 이미 있다면, em.getReference를 호출해도 실제 객체가 호출된다.
( Jpa는 한 트랜잭션 안에서 같은 객체는 무조건 같은 객체임을 보장해준다 )

PersistenceUnitUtil.isLoaded : 프록시 인스턴스의 초기화 여부 확인
entity.getClass().getName 출력 : 프록시 클래스 확인
Hibernate.initialize(entity) : 프록시 강제 초기화


- 즉시로딩과 지연로딩
실무에서는 가급적 지연로딩만 사용하는게 좋다.
★☆★☆★☆★☆★☆★☆ 즉시로밍은 JPQL에서 N+1문제를 일으킴 ★☆★☆★☆★☆★☆★☆
즉시로딩으로 불러오는 경우에, JPQL 사용시에 특정한 엔티티의 모든 값을 로딩시켜놔야하기 때문에
특정값만 불러왔음에도 불구하고, 이와 관련된 모든값을 세팅하기 위해서 N+1번의 쿼리를 발생시키게 된다.
*@ManyToOne, @OneToOne은 기본이 즉시로딩으로 불러와지게 된다. -> LAZY로 설정해야함


- 영속성 전이 : CASCADE : 특정 엔티티와 관련된 모든 엔티티를 한번에 영속상태로 만들고 싶을 떄 적용한다. (편리하게 사용가능)
하위 엔티티들이 특정 엔티티 이외에도 여러 곳에서 사용되는 경우에는 사용하면 안된다.
단일 엔티티에게 완전히 종속적일 때만 사용하는것이 좋다.

- 고아 객체 :  부모 엔티티와 연관관계가 끊어진 자식 엔티티를 자동으로 삭제해준다.
orphanRemoval = true
도멩인 주도 설계의 Aggregate Root 개념을 구현할 때 유용함




















