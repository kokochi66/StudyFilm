다양한 연관관계 매핑

- 다중성
다대일 : @ManyToOne
일대다 : @OneToMany
일대일 : @OneToOne
다대다 : @ManyToMany

- 연관관계의 주인
테이블은 외래키를 통해서 두 테이블이 연관관계를 맺는다.
객체는 양방향 관계가 특별히 존재하지 않으며, 단방향 관계 두가지가 서로를 참조함으로써 성립된다.

다대일 : 다 쪽이 연관관계의 주인이 된다.

일대다 : 일 쪽이 연관관계의 주인이 된다. (일 쪽에 리스트가 들어감)
*DB 설계상에서는 무조건 다 쪽에 외래키가 들어가게 되며, 일 쪽에는 외래키가 들어갈 수 없다.
*연관관계 주인이 일 쪽이 되면, 일 쪽에서 수정을 해주면, 전혀 다른 다 쪽의 테이블의 외래키를 변경시켜줘야한다.
코드 상에서 변화시킨 객체가 실제 DB에서 다른 테이블에 어떤 영향을 미칠지 모르기 때문에 오해를 불러일으킬 수 있다.
양방향 매핑을 굳이 해줌으로써, 성능상에는 효율이 떨어져도, 유지보수가 쉽도록 선택할 수 있다.

일대일 : 일대일 관계는 주 테이블, 대상 테이블 둘 중 하나에 아무거나 외래키를 넣을 수 있다.
:: 일대다와 마찬가지로, 외래키가 있는 곳을 연관관계의 주인으로 선택해주면 된다.
- 주 테이블에 외래키를 넣은 경우
- 대상 테이블에 외래키를 넣은 경우
- 외래키에 데이터베이스 유니크 제약조건 추가

다대다 : 관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관계를 표현할 수 있는 방법이 없다.
관계형 데이터베이스는 다대다 관계를 연결 테이블을 추가하여, 다대일 관계로 풀어내는 방식으로 구현한다.
그러나, 객체는 컬렉션을 사용해서 서로 다대다 관계를 구현할 수 있다. (서로가 서로의 리스트를 가질 수 있음)
- 편리해보이지만 실무에서 사용해서는 안된다. 연결 테이블이 단순히 연결만 하고 끝나지 않으며, 예상치못한 조인이 발생하여 성능상 문제가 발생한다.
다대다의 한계를 극복하기 위해서는, 중간 테이블인 연결 테이블용 엔티티를 별도로 생성하여 다대다처럼 사용하는 방법을 사용하는것이 좋다.
이를 통해서 추가하고싶은 또 다른 컬럼들을 자유롭게 추가할 수 있다는 장점이 있다.

*다대다와 같은 관계에서 여러개의 컬럼을 PK로 사용하는 것 보다, 의미없는 컬럼을 따로 만들어서 PK로 사용하는것이 유지보수에 유리하다.




