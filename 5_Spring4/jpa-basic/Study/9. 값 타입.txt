JPA의 데이터 타입 분류

엔티티 타입 : @Entity로 정의하는 객체이며, 데이터가 변해도 식별자로 지속해서 추적이 가능함.
값 타임 : 단순히 값으로 사용하는 자바 기본 타입이나 객체로, 식별자가 없고 값만이 존재함.

- 기본값 타입 : int, double, Integer, Long, String
생명주기를 엔티티에 의존하며, 다른값과 공유되어서는 안된다.

- 임베디드 타입 : 커스텀한 포지션 자체를 값으로 지정
@Embeded를 붙여서 공통되는 부분을 별도의 타입으로 재정의하는 형태이다.
재사용성이 높으며, 해당 값 타입만을 사용하는 메소드를 별도로 만들 수 있다.

- 컬렉션 값 타입 : collection value type

객체타입의 한계 : 객체의 공유참조를 피할 수 없기 떄문에 참조에 의한 다양한 버그들을 막을 수 있는 방법이 없다.

값타입의 비교
동일성 비교 : 인스턴스의 참조값을 비교 (==사용하여 비교함)
동등성 비교 : 인스턴스의 값을 비교 (equals 메소드를 통해서 비교함)

값 타입 컬렉션 : 현재 대부분의 관계형 DB에서는 객체 내부에 컬렉션 구조를 구현할 수 있는 구조가 없어서, 이런 부분이 필요한 경우에,
일대다 관계의 별도의 테이블을 생성하여 구성해야한다.
값타입 컬렉션은 엔티티와 다르게 식별자 개념이 없으며, 값을 변경시 추적이 어렵다.
그리고 변경사항이 발생하면, 주인 엔티티와 관련된 모든 데이터를 삭제하고, 새로운 값으로 다시 저장하는 과정을 거치게된다.
* 복잡한 형태로 컬렉션을 적용하려면 값 타입 컬렉션이 아닌, 그냥 일대다 관계를 이용하는것이 좋다.
