5. 연관관계 매핑 기초

객체지향에서 지향하는 패러다임과 관계형 DB가 지향하는 패러다임의 차이점에서 오는 문제점을 해결해야함.
- 객체와 테이블 연관관계의 차이를 이해
- 객체의 참조와 테이블의 외래키를 매핑
방향(Direction) : 단방향, 양방향
다중성(Multiplicity) : 다대일, 일대다, 일대일, 다대다 이해
연관관계의 주인(Owner) : 객체 양방향 연관관계는 관리하는 주인이 필요

*예제 시나리오
- 회원과 팀이 존재
- 회원은 하나의 팀에만 소속될 수 있음
- 회원과 팀은 다대일관계

객체를 테이블에 맞추어 모델링 하는 경우 [ 외래 키 식별자를 직접 Id값으로 가져와서 다루는 경우 ]
- 테이블은 외래키로 조인해서 연관된 테이블을 찾는다.
- 객체는 참조를 사용하여 연관된 객체를 찾는다
- 이 차이에 의해서 불필요한 추가연산이 필요하게 될 수 있다.

- 단방향 연관관계
객체지향 모델링 : 객체 자체에 또 다른 객체의 참조값을 직접 넣어서 객체가 안에 객체가 존재하는 구조. (연관관계 저장)
@JoinColumn, @ManyToOne 어노테이션을 지정하여 객체의 참조값에 대해서 JPA에게 알리는 방법이 존재한다.

- 양방향 연관관계와 연관관계의 주인
양방향 연관관계 : 두 테이블이 서로 참조값을 통해서 서로가 서로로 이동이 가능한 상태 (테이블은 Id를 통해 양방향 이동이 가능함)
mappedBy를 위해서 객체와 테이블간 연관관계 차이를 이해해야함
객체 : 단방향 연관관계 두개로 양방향 처럼 구현을 한 상태다.
테이블 : 외래키를 이용한 양방향 연관관계이다.

- 연관관계의 주인 : 객체의 연관관계에서, 관계가 변경될때 어떤 값이 중심이 되어서 변경이 될 지를 결정해야한다.
mappedBy를 통해서 연관관계의 주인을 지정해줄 수 있다. (mappedBy로 지정한 변수가 주인이 됨)
외래키가 있는 곳을 주인으로 결정해야함. - 다대일에서 다 쪽인 곳 (가짜 매핑은 읽기만 가능한 위치, 진짜매핑을 연관관계의 주인으로 결정함)
양방향 연관관계를 세팅할 때에는, 양쪽 값 모두에 값을 일단 세팅하는것이 맞다
(flush, clear 하지않으면 db와의 연결 순서에서 문제가 생기기 때문)

- 연관관계 편의 메소드를 이용하면 쉽게 이용이 가능하다.
- 양방향 매핑시에 무한루프를 조심해야한다 ( toString(), lombok, JSON 생성 라이브러리 )
- 값을 컨트롤러단에서 반환하는 경우에는 Entity를 직접 반환하는 경우는 피해야한다!

DB설계부터 양방향 매핑을 정하지 않고, 단방향 매핑 중심으로 설계를 잘 해두면,
추후에 양방향 매핑이 필요한 시기에 양방향 매핑을 추가하면 된다. ( 단방향 매핑으로 설계가 잘 되어있으면 양방향 매핑은 어렵지않게 추가할 수 있다 )


