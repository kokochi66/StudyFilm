<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- 커스텀 로그인 창을 위해서 커스텀 핸들러를 빈으로 등록한다. -->
	<bean id="customAccessDenied" class="org.hdcd.common.security.CustomAccessDeniedHandler"></bean>
	<bean id="customLoginSuccess" class="org.hdcd.common.security.CustomLoginSuccessHandler"></bean>
	<!-- 커스텀 암호화 -->
	<!-- <bean id="customPasswordEncoder" class="org.hdcd.common.security.CustomNoOpPasswordEncoder"></bean> -->
	
	<!-- 스프링 시큐리티에서 제공되는 BCryptPasswordEncoder 클래스를 빈으로 등록한다. -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
	
	<security:http>
		<security:intercept-url pattern="/board/list" access="permitAll"/>
		<security:intercept-url pattern="/board/register" access="hasRole('ROLE_MEMBER')"/>
		<security:intercept-url pattern="/notice/list" access="permitAll"/>
		<security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')"/>
		<!-- 사용자가 정의한 로그인 페이지의 URI를 지정한다. -->
		<!-- <security:form-login login-page="/login"/>  -->
		<!-- customLoginSuccess를 로그인 성공 처리자로 지정함. -->
		<security:form-login login-page="/login" authentication-success-handler-ref="customLoginSuccess"/>
		<security:access-denied-handler ref="customAccessDenied"/>
		
		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃 한 후 세션을 무효화함 -->
		<security:logout logout-url="/logout" invalidate-session="true" />
	</security:http>

	
	<security:authentication-manager>
	<!-- 스프링 시큐리티 기능을 이용해서 인증 제공자를 등한다. -->	
<!-- 		<security:authentication-provider>
			<security:user-service>
				<security:user name="member" password="{noop}1234" authorities="ROLE_MEMBER"/>
				<security:user name="admin" password="{noop}abcd" authorities="ROLE_MEMBER, ROLE_ADMIN"/>
			</security:user-service>
		</security:authentication-provider> -->
		
		<!-- 커스텀 암호화 인증 제공자를 등록한다. -->
<!-- 		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource"/>
			<security:password-encoder ref="customPasswordEncoder"/>
		</security:authentication-provider> -->
		
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource"
			users-by-username-query="SELECT user_id, user_pw, enabled FROM member WHERE user_id = ?"
			authorities-by-username-query="SELECT b.user_id, a.auth FROM member_auth a, member b WHERE a.user_no = b.user_no AND b.user_id = ?"/>
			<security:password-encoder ref="bcryptPasswordEncoder"/>
		</security:authentication-provider>
	</security:authentication-manager>

</beans>
